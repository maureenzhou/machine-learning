def create_Qtable_line(self, state):

        if state not in self.Qtable.keys():
            self.Qtable[state]={}
            for action in self.valid_actions:
                self.Qtable[state][action]=0.
        return self.Qtable
        
def choose_action(self):
        
        l = self.Qtable[self.state]
        policy_s = np.ones(len(self.valid_actions)) * self.epsilon / len(self.valid_actions)
        policy_s[self.valid_actions.index(max(l,key=l.get))]=1 - self.epsilon + (self.epsilon/ len(self.valid_actions))
        action = np.random.choice(self.valid_actions, p=policy_s)
        return action

def update_Qtable(self,r,action,next_state):
        """
        Update the qtable according to the given rule.
        """
        if self.learning:
         
            self.Qtable[self.state][action] = (1-self.alpha)*self.Qtable[self.state][action] + \
                                (self.alpha*(r+ (self.gamma * max(self.Qtable[next_state].values()))))
